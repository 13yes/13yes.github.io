<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://13yes.github.io</id>
    <title>13yes</title>
    <updated>2020-10-16T10:00:12.341Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://13yes.github.io"/>
    <link rel="self" href="https://13yes.github.io/atom.xml"/>
    <subtitle>一个懒人的blog</subtitle>
    <logo>https://13yes.github.io/images/avatar.png</logo>
    <icon>https://13yes.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 13yes</rights>
    <entry>
        <title type="html"><![CDATA[C++语句和函数]]></title>
        <id>https://13yes.github.io/post/cyu-ju-he-han-shu/</id>
        <link href="https://13yes.github.io/post/cyu-ju-he-han-shu/">
        </link>
        <updated>2020-10-16T09:27:27.000Z</updated>
        <summary type="html"><![CDATA[<p>C++ 程序是一组函数，每个函数又是一组语句。</p>
]]></summary>
        <content type="html"><![CDATA[<p>C++ 程序是一组函数，每个函数又是一组语句。</p>
<!-- more -->
<h2 id="c-语句">C++ 语句</h2>
<pre><code class="language-c++">// carrots.cpp
#include &lt;iostream&gt;

int main() {
	using namespace std;
	int carrots;
	carrots = 25;
	cout &lt;&lt; &quot;I have &quot;;
	cout &lt;&lt; carrots;
	cout &lt;&lt; &quot; carrots.&quot;;
	cout &lt;&lt; endl;
	carrots = carrots - 1;
	cout &lt;&lt; &quot;Crunch, crunch. Now I have &quot; &lt;&lt; carrots &lt;&lt; &quot; carrots.&quot; &lt;&lt; endl;
	return 0;
}
</code></pre>
<h3 id="声明语句和变量">声明语句和变量</h3>
<p><code>int carrots;</code><br>
指出信息的存储位置和所需的内存空间，在C++中，所有变量都必须声明。</p>
<h3 id="赋值语句">赋值语句</h3>
<p><code>carrots = 25;</code><br>
将值赋予存储单元，可以使用连续赋值运算符。</p>
<h2 id="使用cin输入语句">使用cin输入语句</h2>
<pre><code class="language-c++">// getinfo.cpp
#include&lt;iostream&gt;

int main() {
	using namespace std;
	int carrots;
	cout &lt;&lt; &quot;How many carrots do you have?&quot; &lt;&lt; endl;
	cin &gt;&gt; carrots;
	cout &lt;&lt; &quot;Here are 2 more.&quot;;
	carrots = carrots + 2;
	cout &lt;&lt; &quot;Now you have &quot; &lt;&lt; carrots &lt;&lt; &quot; carrots.&quot; &lt;&lt; endl;
	return 0;
}
</code></pre>
<h2 id="函数">函数</h2>
<p>由于函数是创建C++程序的模块，对C++的OOP定义至关重要，因此必须熟悉它。<br>
C++的函数分为两种，有返回值和无返回值。</p>
<h3 id="有返回值的函数">有返回值的函数</h3>
<p>有返回值的函数将生成一个值，可赋予变量或者在其他表达式中使用。在使用函数之前，编译器必须知道函数参数类型和返回值类型。</p>
<pre><code class="language-c++">// sqrt.cpp
#include &lt;iostream&gt;
#include &lt;cmath&gt;

int main() {
    using namespace std;
    double area;
    cout &lt;&lt; &quot;Enter the floor area, in square feet, of you home: &quot;;
    cin &gt;&gt; area;
    double side;
    side = sqrt(area);
    cout &lt;&lt; &quot;That's the equivalent of a square &quot; &lt;&lt; side &lt;&lt; &quot; feet to the side.&quot; &lt;&lt; endl;
    cout &lt;&lt; &quot;How fascinating!&quot; &lt;&lt; endl;
    return 0;
}
</code></pre>
<h3 id="用户定义的函数">用户定义的函数</h3>
<pre><code class="language-c++">// ourfunc.cpp
#include &lt;iostream&gt;
void simon(int);
int main() {
    using namespace std;
    simon(3);
    cout &lt;&lt; &quot;Pick an integer: &quot;;
    int count;
    cin &gt;&gt; count;
    simon(count);
    cout &lt;&lt; &quot;Done!&quot; &lt;&lt; endl;
    return 0;
}
void simon(int n){
    using namespace std;
    cout &lt;&lt; &quot;Simon says touch you toes &quot; &lt;&lt; n &lt;&lt; &quot; times.&quot; &lt;&lt; endl;
}
</code></pre>
<h3 id="用户定义的有返回的函数">用户定义的有返回的函数</h3>
<pre><code class="language-c++">// convert.cpp
#include &lt;iostream&gt;
int stonetolb(int);
int main() {
    using namespace std;
    cout &lt;&lt; &quot;Enter the weight in stone: &quot;;
    int stone;
    cin &gt;&gt; stone;
    int pounds = stonetolb(stone);
    cout &lt;&lt; stone &lt;&lt; &quot; stone = &quot;;
    cout &lt;&lt; pounds &lt;&lt; &quot; pounds.&quot; &lt;&lt; endl;
    return 0;
}
int stonetolb(int sts){
    return 14 * sts;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[开始学习 C++]]></title>
        <id>https://13yes.github.io/post/kai-shi-xue-xi-c/</id>
        <link href="https://13yes.github.io/post/kai-shi-xue-xi-c/">
        </link>
        <updated>2020-10-16T08:23:46.000Z</updated>
        <summary type="html"><![CDATA[<p>第一段代码，IDE选择了 CLion，学习材料 C++ Primer Plus</p>
]]></summary>
        <content type="html"><![CDATA[<p>第一段代码，IDE选择了 CLion，学习材料 C++ Primer Plus</p>
<!-- more -->
<h2 id="hello-c">Hello C++</h2>
<pre><code class="language-c++">//myfirst.cpp
#include &lt;iostream&gt;

int main() {
    using namespace std;
    cout &lt;&lt; &quot;Come up and C++ me some time.&quot;;
    cout &lt;&lt; endl;
    cout &lt;&lt; &quot;You won't regret it!&quot; &lt;&lt; endl;
    return 0;
}
</code></pre>
<ol>
<li>注释，由前缀//标识</li>
<li>预处理器编译指令#include</li>
<li>函数头 int main()</li>
<li>编译指令 using namespace</li>
<li>函数体，用 {} 括起来</li>
<li>使用C++的cout 工具显示消息内容</li>
<li>结束main()函数的return 语句</li>
</ol>
<h2 id="main函数">main()函数</h2>
<p>去掉修饰后，程序myfirst.cpp 结构如下：</p>
<pre><code class="language-c++">int main(){
    statements
    return 0;
}
</code></pre>
<p>int main() 叫做函数头，花括号{}中间的部分叫做函数体。main()中最后一条语句叫做返回语句return statement，他结束该函数。<br>
通常，C++ 程序必须包含一个名为main()的函数。</p>
<h2 id="注释">注释</h2>
<p>以双斜杠打头//。为读者提供说明，编译器忽略注释。<br>
/*  */风格的C注释也能够识别。</p>
<h2 id="预处理器和iostream-文件">预处理器和iostream 文件</h2>
<p>和C 一样，C++也使用预处理器，该程序在进行主编译之前，对源文件进行处理。<br>
iostream，典型的预处理器操作：在源代码被编译前，替换或添加文本。</p>
<h2 id="头文件名">头文件名</h2>
<p>像iostream这样的文件叫做头文件。C++编译器自带很多头文件，每个头文件都支持一组特定的工具。C语言传统的头文件使用拓展名h，如math.h 。C++对老式C头文件进行了保留而没有拓展名h，cmath。</p>
<h2 id="命名空间">命名空间</h2>
<p>如果使用iostream，则应使用命名空间编译指令来使iostream中定义对程序可用：<br>
<code>using namespace std;</code><br>
这叫做using编译指令，是C++ 的一项特性，旨在编写大型程序以及将多个厂商的代码组合起来的程序更容易，有助于组织代码。<br>
<code>std::cout &lt;&lt;&quot;Come up and C++ me some time.&quot;;</code><br>
使用using编译指令可以不必使用std::前缀。</p>
<h2 id="使用cout进行c输出">使用cout进行C++输出</h2>
<p><code>cout&lt;&lt; &quot;Come up and C++ me some time.&quot;;</code><br>
双引号内容为要打印的消息。</p>
<h3 id="控制符-endl">控制符 endl</h3>
<p>endl是特殊的C++符号，表示重启一行。位于命名空间std中。</p>
<h3 id="换行符">换行符</h3>
<p>C语言符号\n。</p>
]]></content>
    </entry>
</feed>